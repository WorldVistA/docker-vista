#!/usr/bin/env bash
#---------------------------------------------------------------------------
# Copyright 2011-2017 The Open Source Electronic Health Record Agent
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#---------------------------------------------------------------------------

# init script for VistA

# Debian LSB info
### BEGIN INIT INFO
# Provides:          foiavista
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start VistA services at boot time
# Description:       Starts/Stops VistA instances in a sane way.
#                    Includes starting TaskMan.
### END INIT INFO

# Setup environment variables
# This path will be replaced with the correct $basedir when a VistA instance
# is created. This script will need to have it hardcoded
source /home/foia/etc/env

# Start VistA background tasks
start() {
    # If a database is shutdown cleanly there shouldn't be anything in the
    # journals to replay, so we can run this without worry
    echo "Ensuring a consistant database (mupip recover -backward)"
    su $instance -c "source $basedir/etc/env && $gtm_dist/mupip journal -recover -backward $basedir/j/$instance.mjl >> $basedir/log/journalRecovery.log 2>&1 && $basedir/bin/enableJournal.sh"

    # Delete temp and then recreate
    echo "Deleting and recreating temp region"
    rm -vf $basedir/g/temp.dat
    su $instance -c "source $basedir/etc/env && $gtm_dist/mupip create -region=TEMP"

    # Rundown readonly GT.M/YDB databases
    for f in $gtm_dist/*.dat; do $gtm_dist/mupip rundown -f $f; done

    # Remove relinkctl files
    su $instance -c "source $basedir/etc/env && rm -f $basedir/tmp/*relink*"

    # Start TaskMan
    echo "Starting TaskMan"
    su $instance -c "source $basedir/etc/env && cd $basedir/tmp && $gtm_dist/mumps -run START^ZTMB"

    # Start M-Web-Server @ 9080
    if [ -f $basedir/r/_webreq.m ] || [ -f $basedir/p/_webreq.m ]; then
        echo "Starting M Web Server"
        su $instance -c "source $basedir/etc/env && cd $basedir/tmp && $gtm_dist/mumps -r %XCMD 'do job^%webreq(9080)'"
    fi

    # Start Octo
    if [ -d $basedir/lib/gtm/plugin/bin ] ; then
        echo "Starting Rocto"
        su $instance -c "source $basedir/etc/env && $gtm_dist/mupip journal -recover -backward $basedir/j/octo.mjl >> $basedir/log/OctoJournalRecovery.log 2>&1"
        su $instance -c "source $basedir/etc/env && $gtm_dist/mupip set -journal=\"enable,on,before,file=$basedir/j/octo.mjl\" -file $basedir/g/octo.dat >> $basedir/log/OctoJournal.log 2>&1"
        su $instance -c "source $basedir/etc/env && cd $basedir && $basedir/lib/gtm/plugin/bin/rocto > $basedir/log/rocto.log 2>&1 &"
    fi
}
stop() {
    # Stop TaskMan
    su $instance -c "source $basedir/etc/env && mumps -run ^%XCMD 'S U=\"^\" D STOP^ZTMKU' << EOF
Y
Y
Y
EOF"
    
    # Wait for TaskMan to stop
    echo "Waiting for TaskMan to stop (2 sec)"
    sleep 2

    # Look for M processes and terminate them nicely
    processes=$(pgrep mumps)
    if [ ! -z "${processes}" ] ; then
        echo "Stopping any remaining M processes nicely"
        for i in ${processes}
        do
            mupip stop ${i}
        done

        # Wait for process to react to mupip stop instead of force kill later
        sleep 5
    fi

    # Look for M processes that are still running
    processes=$(pgrep mumps)
    if [ ! -z "${processes}" ] ; then
        #TODO: logging required here
        echo "M process are being shutdown forcefully!"
        pkill -9 mumps
    fi
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    *)
        echo "Usage: $0 {start|stop|restart}"
        ;;
esac
